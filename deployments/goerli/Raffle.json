{
  "address": "0xbBe5C5fb6e7f1294aDC35981096a8Ba5C1166ac1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f19ea88ae76a1a83acda8f12546a6d44f1159d5bd373b0bd9ddaac74ffb21e0",
  "receipt": {
    "to": null,
    "from": "0x8ee9B41620d01dAF068019fEE95D3aC855648B50",
    "contractAddress": "0xbBe5C5fb6e7f1294aDC35981096a8Ba5C1166ac1",
    "transactionIndex": 21,
    "gasUsed": "751983",
    "logsBloom": "0x
    "blockHash": "0xa20d89b1c738013b87b6b6400c6806dc27f3c818eae3a8fcd645f021d459cc0b",
    "transactionHash": "0x4f19ea88ae76a1a83acda8f12546a6d44f1159d5bd373b0bd9ddaac74ffb21e0",
    "logs": [],
    "blockNumber": 9065772,
    "cumulativeGasUsed": "5286447",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2ca8e0c643bde4c2e08ab1fa0da3401adad7734d",
    "8853",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 2,
  "solcInputHash": "e6c83779911107feb01a8cefdafb5452",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRaffleState()\":{\"notice\":\"Getter Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n  /* Type declarations */\\n  enum RaffleState {\\n    OPEN,\\n    CALCULATING\\n  }\\n  /* State variables */\\n  VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n  uint64 private immutable i_subscriptionId;\\n  bytes32 private immutable i_gasLane;\\n  uint32 private immutable i_callbackGasLimit;\\n  uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n  uint32 private constant NUM_WORDS = 1;\\n\\n  // Lottery Variables\\n  uint256 private immutable i_interval;\\n  uint256 private immutable i_entranceFee;\\n  uint256 private s_lastTimeStamp;\\n  address private s_recentWinner;\\n  address payable[] private s_players;\\n  RaffleState private s_raffleState;\\n\\n  /* Events */\\n  event RequestedRaffleWinner(uint256 indexed requestId);\\n  event RaffleEnter(address indexed player);\\n  event WinnerPicked(address indexed player);\\n\\n  /* Functions */\\n  constructor(\\n    address vrfCoordinatorV2,\\n    uint64 subscriptionId,\\n    bytes32 gasLane, // keyHash\\n    uint256 interval,\\n    uint256 entranceFee,\\n    uint32 callbackGasLimit\\n  ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    i_gasLane = gasLane;\\n    i_interval = interval;\\n    i_subscriptionId = subscriptionId;\\n    i_entranceFee = entranceFee;\\n    s_raffleState = RaffleState.OPEN;\\n    s_lastTimeStamp = block.timestamp;\\n    i_callbackGasLimit = callbackGasLimit;\\n  }\\n\\n  function enterRaffle() public payable {\\n    require(msg.value >= i_entranceFee, \\\"Not enough value sent\\\");\\n    require(s_raffleState == RaffleState.OPEN, \\\"Raffle is not open\\\");\\n    s_players.push(payable(msg.sender));\\n    // Emit an event when we update a dynamic array or mapping\\n    emit RaffleEnter(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This is the function that the Chainlink Keeper nodes call\\n   * they look for `upkeepNeeded` to return True.\\n   * the following should be true for this to return true:\\n   * 1. The time interval has passed between raffle runs.\\n   * 2. The lottery is open.\\n   * 3. The contract has ETH.\\n   * 4. Implicity, your subscription is funded with LINK.\\n   */\\n  function checkUpkeep(\\n    bytes memory /* checkData */\\n  )\\n    public\\n    view\\n    override\\n    returns (bool upkeepNeeded, bytes memory /* performData */)\\n  {\\n    bool isOpen = RaffleState.OPEN == s_raffleState;\\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n    bool hasPlayers = s_players.length > 0;\\n    bool hasBalance = address(this).balance > 0;\\n    upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n    return (upkeepNeeded, \\\"0x0\\\"); \\n  }\\n\\n  /**\\n   * @dev Once `checkUpkeep` is returning `true`, this function is called\\n   * and it kicks off a Chainlink VRF call to get a random winner.\\n   */\\n  function performUpkeep(bytes calldata /* performData */) external override {\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n    require(upkeepNeeded, \\\"Upkeep not needed\\\");\\n    s_raffleState = RaffleState.CALCULATING;\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n      i_gasLane,\\n      i_subscriptionId,\\n      REQUEST_CONFIRMATIONS,\\n      i_callbackGasLimit,\\n      NUM_WORDS\\n    );\\n    emit RequestedRaffleWinner(requestId);\\n  }\\n\\n  /**\\n   * @dev This is the function that Chainlink VRF node\\n   * calls to send the money to the random winner.\\n   */\\n  function fulfillRandomWords(\\n    uint256 /* requestId */,\\n    uint256[] memory randomWords\\n  ) internal override {\\n    uint256 indexOfWinner = randomWords[0] % s_players.length;\\n    address payable recentWinner = s_players[indexOfWinner];\\n    s_recentWinner = recentWinner;\\n    s_players = new address payable[](0);\\n    s_raffleState = RaffleState.OPEN;\\n    s_lastTimeStamp = block.timestamp;\\n    (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n    require(success, \\\"Transfer failed\\\");\\n    emit WinnerPicked(recentWinner);\\n  }\\n\\n  /** Getter Functions */\\n  function getRaffleState() public view returns (RaffleState) {\\n    return s_raffleState;\\n  }\\n\\n  function getNumWords() public pure returns (uint256) {\\n    return NUM_WORDS;\\n  }\\n\\n  function getRequestConfirmations() public pure returns (uint256) {\\n    return REQUEST_CONFIRMATIONS;\\n  }\\n\\n  function getRecentWinner() public view returns (address) {\\n    return s_recentWinner;\\n  }\\n\\n  function getPlayer(uint256 index) public view returns (address) {\\n    return s_players[index];\\n  }\\n\\n  function getLastTimeStamp() public view returns (uint256) {\\n    return s_lastTimeStamp;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return i_interval;\\n  }\\n\\n  function getEntranceFee() public view returns (uint256) {\\n    return i_entranceFee;\\n  }\\n\\n  function getNumberOfPlayers() public view returns (uint256) {\\n    return s_players.length;\\n  }\\n}\\n\",\"keccak256\":\"0xa2410e3e484ec6299bb539686d503c026357db020b9f2d5bc57e0a6f7a944295\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b50604051610d99380380610d998339810160408190526100309161007e565b6001600160a01b0395909516608081905260a05260e092909252610120526001600160401b039190911660c052610140526003805460ff191690554260005563ffffffff1661010052610109565b60008060008060008060c0878903121561009757600080fd5b86516001600160a01b03811681146100ae57600080fd5b60208801519096506001600160401b03811681146100cb57600080fd5b8095505060408701519350606087015192506080870151915060a087015163ffffffff811681146100fb57600080fd5b809150509295509295509295565b60805160a05160c05160e051610100516101205161014051610c226101776000396000818160d6015261030701526000818161020a015261061501526000610510015260006104b2015260006104d80152600061054c01526000818161028301526102c50152610c226000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b4146101fb578063c1c244e81461022e578063e55ae4e814610243578063fd6673f51461026357600080fd5b806353a2c19a146101a55780635f1b0fd8146101b95780636e04ff0d146101cd57600080fd5b806309bc33a7146100c7578063115cbaf5146101095780631fe543e3146101295780632cfcc5391461014b5780634585e33b14610153578063473f1ddc14610173575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b5060035460ff1660405161010091906108db565b34801561013557600080fd5b5061014961014436600461094a565b610278565b005b610149610305565b34801561015f57600080fd5b5061014961016e3660046109fc565b610436565b34801561017f57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610100565b3480156101b157600080fd5b5060016100f6565b3480156101c557600080fd5b5060036100f6565b3480156101d957600080fd5b506101ed6101e8366004610a6e565b6105ed565b604051610100929190610b03565b34801561020757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b34801561023a57600080fd5b506000546100f6565b34801561024f57600080fd5b5061018d61025e366004610b5b565b610692565b34801561026f57600080fd5b506002546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f75760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030182826106c2565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561036d5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da081d985b1d59481cd95b9d605a1b60448201526064016102ee565b600060035460ff166001811115610386576103866108c5565b146103c85760405162461bcd60e51b81526020600482015260126024820152712930b33336329034b9903737ba1037b832b760711b60448201526064016102ee565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b6000610450604051806020016040528060008152506105ed565b509050806104945760405162461bcd60e51b8152602060048201526011602482015270155c1ad9595c081b9bdd081b9959591959607a1b60448201526064016102ee565b6003805460ff1916600190811782556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16602482015260448101929092527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606483015260848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af1158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610b74565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b600354600090606090829060ff16600181111561060c5761060c6108c5565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600054426106429190610b8d565b6002549110915015154715158280156106585750835b80156106615750805b801561066a5750815b60408051808201909152600381526203078360ec1b6020820152909890975095505050505050565b6000600282815481106106a7576106a7610bb4565b6000918252602090912001546001600160a01b031692915050565b6000600280549050826000815181106106dd576106dd610bb4565b60200260200101516106ef9190610bca565b905060006002828154811061070657610706610bb4565b6000918252602082200154600180546001600160a01b0319166001600160a01b039092169182179055915060405190808252806020026020018201604052801561075a578160200160208202803683370190505b50805161076f9160029160209091019061084b565b506003805460ff191690554260009081556040516001600160a01b0383169047908381818185875af1925050503d80600081146107c8576040519150601f19603f3d011682016040523d82523d6000602084013e6107cd565b606091505b50509050806108105760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102ee565b6040516001600160a01b038316907f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df90600090a25050505050565b8280548282559060005260206000209081019282156108a0579160200282015b828111156108a057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061086b565b506108ac9291506108b0565b5090565b5b808211156108ac57600081556001016108b1565b634e487b7160e01b600052602160045260246000fd5b60208101600283106108fd57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561094257610942610903565b604052919050565b6000806040838503121561095d57600080fd5b8235915060208084013567ffffffffffffffff8082111561097d57600080fd5b818601915086601f83011261099157600080fd5b8135818111156109a3576109a3610903565b8060051b91506109b4848301610919565b81815291830184019184810190898411156109ce57600080fd5b938501935b838510156109ec578435825293850193908501906109d3565b8096505050505050509250929050565b60008060208385031215610a0f57600080fd5b823567ffffffffffffffff80821115610a2757600080fd5b818501915085601f830112610a3b57600080fd5b813581811115610a4a57600080fd5b866020828501011115610a5c57600080fd5b60209290920196919550909350505050565b60006020808385031215610a8157600080fd5b823567ffffffffffffffff80821115610a9957600080fd5b818501915085601f830112610aad57600080fd5b813581811115610abf57610abf610903565b610ad1601f8201601f19168501610919565b91508082528684828501011115610ae757600080fd5b8084840185840137600090820190930192909252509392505050565b821515815260006020604081840152835180604085015260005b81811015610b3957858101830151858201606001528201610b1d565b506000606082860101526060601f19601f830116850101925050509392505050565b600060208284031215610b6d57600080fd5b5035919050565b600060208284031215610b8657600080fd5b5051919050565b81810381811115610bae57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b600082610be757634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220627fc427e5f97a3811a91a85811991b85b497aef48ebcc4f7331bb0d8d7a84b064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b4146101fb578063c1c244e81461022e578063e55ae4e814610243578063fd6673f51461026357600080fd5b806353a2c19a146101a55780635f1b0fd8146101b95780636e04ff0d146101cd57600080fd5b806309bc33a7146100c7578063115cbaf5146101095780631fe543e3146101295780632cfcc5391461014b5780634585e33b14610153578063473f1ddc14610173575b600080fd5b3480156100d357600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561011557600080fd5b5060035460ff1660405161010091906108db565b34801561013557600080fd5b5061014961014436600461094a565b610278565b005b610149610305565b34801561015f57600080fd5b5061014961016e3660046109fc565b610436565b34801561017f57600080fd5b506001546001600160a01b03165b6040516001600160a01b039091168152602001610100565b3480156101b157600080fd5b5060016100f6565b3480156101c557600080fd5b5060036100f6565b3480156101d957600080fd5b506101ed6101e8366004610a6e565b6105ed565b604051610100929190610b03565b34801561020757600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006100f6565b34801561023a57600080fd5b506000546100f6565b34801561024f57600080fd5b5061018d61025e366004610b5b565b610692565b34801561026f57600080fd5b506002546100f6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102f75760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b61030182826106c2565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561036d5760405162461bcd60e51b8152602060048201526015602482015274139bdd08195b9bdd59da081d985b1d59481cd95b9d605a1b60448201526064016102ee565b600060035460ff166001811115610386576103866108c5565b146103c85760405162461bcd60e51b81526020600482015260126024820152712930b33336329034b9903737ba1037b832b760711b60448201526064016102ee565b6002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319163390811790915560405190917f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d491a2565b6000610450604051806020016040528060008152506105ed565b509050806104945760405162461bcd60e51b8152602060048201526011602482015270155c1ad9595c081b9bdd081b9959591959607a1b60448201526064016102ee565b6003805460ff1916600190811782556040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16602482015260448101929092527f000000000000000000000000000000000000000000000000000000000000000063ffffffff16606483015260848201526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af1158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610b74565b60405190915081907fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b90600090a250505050565b600354600090606090829060ff16600181111561060c5761060c6108c5565b600014905060007f0000000000000000000000000000000000000000000000000000000000000000600054426106429190610b8d565b6002549110915015154715158280156106585750835b80156106615750805b801561066a5750815b60408051808201909152600381526203078360ec1b6020820152909890975095505050505050565b6000600282815481106106a7576106a7610bb4565b6000918252602090912001546001600160a01b031692915050565b6000600280549050826000815181106106dd576106dd610bb4565b60200260200101516106ef9190610bca565b905060006002828154811061070657610706610bb4565b6000918252602082200154600180546001600160a01b0319166001600160a01b039092169182179055915060405190808252806020026020018201604052801561075a578160200160208202803683370190505b50805161076f9160029160209091019061084b565b506003805460ff191690554260009081556040516001600160a01b0383169047908381818185875af1925050503d80600081146107c8576040519150601f19603f3d011682016040523d82523d6000602084013e6107cd565b606091505b50509050806108105760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016102ee565b6040516001600160a01b038316907f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df90600090a25050505050565b8280548282559060005260206000209081019282156108a0579160200282015b828111156108a057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061086b565b506108ac9291506108b0565b5090565b5b808211156108ac57600081556001016108b1565b634e487b7160e01b600052602160045260246000fd5b60208101600283106108fd57634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561094257610942610903565b604052919050565b6000806040838503121561095d57600080fd5b8235915060208084013567ffffffffffffffff8082111561097d57600080fd5b818601915086601f83011261099157600080fd5b8135818111156109a3576109a3610903565b8060051b91506109b4848301610919565b81815291830184019184810190898411156109ce57600080fd5b938501935b838510156109ec578435825293850193908501906109d3565b8096505050505050509250929050565b60008060208385031215610a0f57600080fd5b823567ffffffffffffffff80821115610a2757600080fd5b818501915085601f830112610a3b57600080fd5b813581811115610a4a57600080fd5b866020828501011115610a5c57600080fd5b60209290920196919550909350505050565b60006020808385031215610a8157600080fd5b823567ffffffffffffffff80821115610a9957600080fd5b818501915085601f830112610aad57600080fd5b813581811115610abf57610abf610903565b610ad1601f8201601f19168501610919565b91508082528684828501011115610ae757600080fd5b8084840185840137600090820190930192909252509392505050565b821515815260006020604081840152835180604085015260005b81811015610b3957858101830151858201606001528201610b1d565b506000606082860101526060601f19601f830116850101925050509392505050565b600060208284031215610b6d57600080fd5b5035919050565b600060208284031215610b8657600080fd5b5051919050565b81810381811115610bae57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b600082610be757634e487b7160e01b600052601260045260246000fd5b50069056fea2646970667358221220627fc427e5f97a3811a91a85811991b85b497aef48ebcc4f7331bb0d8d7a84b064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRaffleState()": {
        "notice": "Getter Functions "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 207,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 210,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 213,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(RaffleState)184"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)184": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}